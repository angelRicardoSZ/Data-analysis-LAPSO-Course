tslm_fancy <- tslm(
fancy ~ trend + season + surfing_festival
)
fc_tslm_fancy2 <- forecast(
tslm_fancy,
newdata = nw
)
autoplot(fc_tslm_fancy2)
library(forecast)
library(fpp2)
library(GGally)
library(ggplot2)
help(gasoline)
autoplot(gasoline, xlab="Year")
str(gasoline)
head(gasoline)
gasolina_hasta_2014 <-window(gasoline,end=2015)
autoplot(gasolina_hasta_2004, xlab = "Year")
gasolina_hasta_2004 <-window(gasoline,end=2005)
autoplot(gasolina_hasta_2004, xlab = "Year")
c(1, 2, 3, 5, 10, 20)
a<- c(1, 2, 3, 5, 10, 20)
a
for(num in a){
#make variable names for each model using pair number.
var_name <- paste("tslm_ft",
as.character(num),
"_gasolina_hasta_2004",
sep = "")
#assign ts linear model to each variable name.
assign(var_name,
tslm(gasolina_hasta_2004 ~ trend + fourier(
gasolina_hasta_2004,
K = num
))
)
#plot the data and fitted values
print(
autoplot(gasolina_hasta_2004) +
autolayer(get(var_name)$fitted.values,
series = as.character(num)) +
ggtitle(var_name) +
ylab("gasoline") +
guides(colour = guide_legend(title = "Number of Fourier Transform pairs"))
)
}
tslm_ft1_gasolina_hasta_2004
paste("tslm_ft",
2,
"_gasolina_hasta_2004",
sep = "")
paste("tslm_ft",
2,
"_gasolina_hasta_2004",
sep = ",")
fourier(
gasolina_hasta_2004,
K = 4
)
autoplot(gasoline_until_2004) +
autolayer(tslm_ft1_gasoline_until_2004$fitted.values, series = "1") +
autolayer(tslm_ft5_gasoline_until_2004$fitted.values, series = "2") +
autolayer(tslm_ft10_gasoline_until_2004$fitted.values, series = "3") +
autolayer(tslm_ft10_gasoline_until_2004$fitted.values, series = "5") +
autolayer(tslm_ft20_gasoline_until_2004$fitted.values, series = "10") +
autolayer(tslm_ft20_gasoline_until_2004$fitted.values, series = "20") +
guides(colour = guide_legend(title = "Fourier Transform pairs")) +
scale_color_discrete(breaks =a)
autoplot(gasoline_until_2004) +
autolayer(tslm_ft1_gasolina_hasta_2004$fitted.values, series = "1") +
autolayer(tslm_ft5_gasolina_hasta_2004$fitted.values, series = "2") +
autolayer(tslm_ft10_gasolina_hasta_2004$fitted.values, series = "3") +
autolayer(tslm_ft10_gasolina_hasta_2004$fitted.values, series = "5") +
autolayer(tslm_ft20_gasolina_hasta_2004$fitted.values, series = "10") +
autolayer(tslm_ft20_gasolina_hasta_2004$fitted.values, series = "20") +
guides(colour = guide_legend(title = "Fourier Transform pairs")) +
scale_color_discrete(breaks =a)
autoplot(gasoline_until_2004) +
autolayer(tslm_ft1_gasolina_hasta_2004$fitted.values, series = "1") +
autolayer(tslm_ft5_gasolina_hasta_2004$fitted.values, series = "2") +
autolayer(tslm_ft10_gasolina_hasta_2004$fitted.values, series = "3") +
autolayer(tslm_ft10_gasolina_hasta_2004$fitted.values, series = "5") +
autolayer(tslm_ft20_gasolina_hasta_2004$fitted.values, series = "10") +
autolayer(tslm_ft20_gasolina_hasta_2004$fitted.values, series = "20") +
guides(colour = guide_legend(title = "Fourier Transform pairs")) +
scale_color_discrete(breaks =a)
autoplot(gasolina_hasta_2004) +
autolayer(tslm_ft1_gasolina_hasta_2004$fitted.values, series = "1") +
autolayer(tslm_ft5_gasolina_hasta_2004$fitted.values, series = "2") +
autolayer(tslm_ft10_gasolina_hasta_2004$fitted.values, series = "3") +
autolayer(tslm_ft10_gasolina_hasta_2004$fitted.values, series = "5") +
autolayer(tslm_ft20_gasolina_hasta_2004$fitted.values, series = "10") +
autolayer(tslm_ft20_gasolina_hasta_2004$fitted.values, series = "20") +
guides(colour = guide_legend(title = "Fourier Transform pairs")) +
scale_color_discrete(breaks =a)
tslm_ft_gasolina_hasta_2004.name <- paste(
"tslm_ft", 1, "_gasoline_until_2004",
sep = ""
)
for (j in a){
tslm_ft_gasolina_hasta_2004.name <- paste(
"tslm_ft", as.character(i), "_gasoline_until_2004",
sep = ""
)
writeLines(
paste(
"\n", tslm_ft_gasolina_hasta_2004.name, "\n"
)
)
print(CV(get(tslm_ft_gasolina_hasta_2004.name)))
}
for (j in a){
tslm_ft_gasolina_hasta_2004.name <- paste(
"tslm_ft", as.character(j), "_gasoline_until_2004",
sep = ""
)
writeLines(
paste(
"\n", tslm_ft_gasolina_hasta_2004.name, "\n"
)
)
print(CV(get(tslm_ft_gasolina_hasta_2004.name)))
}
for (j in a){
tslm_ft_gasolina_hasta_2004.name <- paste(
"tslm_ft", as.character(j), "_gasolina_hasta_2004",
sep = ""
)
writeLines(
paste(
"\n", tslm_ft_gasolina_hasta_2004.name, "\n"
)
)
print(CV(get(tslm_ft_gasolina_hasta_2004.name)))
}
for (j in a){
tslm_ft_gasolina_hasta_2004.name <- paste(
"tslm_ft", as.character(j), "_gasolina_hasta_2004",
sep = ""
)
writeLines(
paste(
tslm_ft_gasolina_hasta_2004.name, "\n"
)
)
print(CV(get(tslm_ft_gasolina_hasta_2004.name)))
}
min_AICc <- Inf
min_AICc
min_AICc <- Inf
min_K_by_AICc <- 0
min_CV <- Inf
min_K_by_CV <- 0
AICc_K <- 0
CV_K <- 0
for(num in 1:26){
AICc_K <- CV(
tslm(
gasoline_until_2004 ~ trend + fourier(gasoline_until_2004, K = num)
)
)[["AICc"]]
print(AICc_K)
CV_K <- CV(
tslm(
gasoline_until_2004 ~ trend + fourier(gasoline_until_2004, K = num)
)
)[["CV"]]
print(CV_K)
# If the minimum AICc and CV values are found, the loop don't need to run anymore. Therefore print the result number of pairs and break the loop.
# If num = 1, don't run below codes and move to num = 2. With just the result of num = 1, I cannot know whether the AICc and CV values are minimum.
if(num != 1){
if(AICc_K >= min_AICc & CV_K >= min_CV){
writeLines(
paste("The number of Fourier Transform pairs to minimize AICc",
"\n",
as.character(min_K_by_AICc)
)
)
writeLines(
paste("The number of Fourier Transform pairs to minimize CV",
"\n",
as.character(min_K_by_CV)
)
)
break
}
}
# find the minimum AICc and CV and the number of pairs at the state.
if(AICc_K < min_AICc){
min_AICc <- AICc_K
min_K_by_AICc <- num
}
if(CV_K < min_CV){
min_CV <- CV_K
min_K_by_CV <- num
}
}
for(num in 1:26){
AICc_K <- CV(
tslm(
gasolina_hasta_2004 ~ trend + fourier(gasolina_hasta_2004, K = num)
)
)[["AICc"]]
print(AICc_K)
CV_K <- CV(
tslm(
gasolina_hasta_2004 ~ trend + fourier(gasolina_hasta_2004, K = num)
)
)[["CV"]]
print(CV_K)
# If the minimum AICc and CV values are found, the loop don't need to run anymore. Therefore print the result number of pairs and break the loop.
# If num = 1, don't run below codes and move to num = 2. With just the result of num = 1, I cannot know whether the AICc and CV values are minimum.
if(num != 1){
if(AICc_K >= min_AICc & CV_K >= min_CV){
writeLines(
paste("The number of Fourier Transform pairs to minimize AICc",
"\n",
as.character(min_K_by_AICc)
)
)
writeLines(
paste("The number of Fourier Transform pairs to minimize CV",
"\n",
as.character(min_K_by_CV)
)
)
break
}
}
# find the minimum AICc and CV and the number of pairs at the state.
if(AICc_K < min_AICc){
min_AICc <- AICc_K
min_K_by_AICc <- num
}
if(CV_K < min_CV){
min_CV <- CV_K
min_K_by_CV <- num
}
}
tslm_ft7_gasolina_hasta_2004 <- tslm(
gasolina_hasta_2004 ~ trend + fourier(
gasolina_hasta_2004,
K = 7
)
)
checkresiduals(tslm_ft7_gasolina_hasta_2004)
fc_gasoline_2005 <- forecast(
tslm_ft7_gasolina_hasta_2004,
newdata=data.frame(fourier(
gasoline_until_2004, K = 7, h = 52)
)
)
fc_gasoline_2005 <- forecast(
tslm_ft7_gasolina_hasta_2004,
newdata=data.frame(fourier(
gasolina_hasta_2004, K = 7, h = 52)
)
)
autoplot(fc_gasoline_2005) +
autolayer(window(
gasoline,
start = 2004,
end = 2006
)
) +
scale_x_continuous(limits = c(2004, 2006))
library(forecast)
library(fpp2)
library(GGally)
library(ggplot2)
h <- 8
fc_tslm_huron <- forecast(tslm_huron, h=h)
tslm_huron <- tslm(huron ~ trend)
h <- 8
fc_tslm_huron <- forecast(tslm_huron, h=h)
tslm_log_huron <- tslm(huron ~ trend,
lambda = 0)
fc_tslm_log_huron <- forecast(tslm_log_huron, h=h)
t <- time(huron)  #w
t.break <- 1915
t_piece <- ts(pmax(0,t-t.break), start=1875)
tslm_pw_huron <- tslm(huron ~ t + t_piece)
l=length(t)  # 98
t_new <-t[l] + seq(h)  #  the data to forecast
t_piece_new <- t_piece[length(t_piece)]+seq(h)
newdata <- cbind(t=t_new,
t_piece=t_piece_new) %>%
as.data.frame()
fc_tslm_pw_huron <- forecast(
tslm_pw_huron,
newdata = newdata
)
tslm_spline_huron <- splinef(huron, lambda = 0)
fc_tslm_spline_huron <- forecast(
tslm_spline_huron,
newdata = newdata
)
autoplot(huron) +
autolayer(fitted(tslm_huron), series = "Linear") +
autolayer(fitted(tslm_log_huron), series="Logarithm") +
autolayer(fitted(tslm_pw_huron), series = "Piecewise") +
autolayer(fitted(tslm_spline_huron), series = "Cubic Spline") +
autolayer(fc_tslm_pw_huron, series="Piecewise") +
autolayer(fc_tslm_huron$mean, series = "Linear") +
autolayer(fc_tslm_log_huron$mean, series="Logarithm") +
autolayer(fc_tslm_spline_huron$mean, series="Cubic Spline") +
xlab("Year") +  ylab("Water level") +
ggtitle("Lake Huron water level change") +
guides(colour=guide_legend(title=" "))
fitted(tslm_huron)
tslm_huron
fc_tslm_pw_huron
fc_tslm_huron$mean
fc_tslm_huron
autoplot(huron) +
autolayer(fitted(tslm_huron), series = "Linear") +
autolayer(fc_tslm_huron, series = "Linear") +
xlab("Year") +  ylab("Water level") +
ggtitle("Lake Huron water level change",
subtitle = "using Linear Regression model") +
guides(colour=guide_legend(title=" ")) +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
autoplot(huron) +
autolayer(fitted(tslm_pw_huron), series = "Piecewise") +
autolayer(fc_tslm_pw_huron, series="Piecewise") +
xlab("Year") +  ylab("Water level") +
ggtitle("Lake Huron water level change",
subtitle = "using piecewise linear model") +
guides(colour=guide_legend(title=" ")) +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
library(forecast)
library(fpp2)
library(GGally)
library(ggplot2)
autoplot(elecsales) + xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia")
ma(elecsales, 5)
autoplot(elecsales, series="Data") +
autolayer(ma(elecsales,5), series="5-MA") +
xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia") +
scale_colour_manual(values=c("Data"="grey50","5-MA"="red"),
breaks=c("Data","5-MA"))
autoplot(elecsales, series="Data") +
autolayer(ma(elecsales,5), series="5-MA") +
xlab("Year") + ylab("GWh") +
ggtitle("Annual electricity sales: South Australia") +
scale_colour_manual(values=c("Data"="grey50","5-MA"="blue"),
breaks=c("Data","5-MA"))
beer2 <- window(ausbeer,start=1992)
ma4 <- ma(beer2,order=4,centre = FALSE)
ma2x4 <- ma(beer2, order=4, centre = FALSE)
ma4
ma2x4
ma2x4 <- ma(beer2, order=4, centre = TRUE)
ma2x4
autoplot(elecequip, series="Data") +
autolayer(ma(elecequip, 12), series="12-MA") +
xlab("Year") + ylab("New orders index") +
ggtitle("Electrical equipment manufacturing (Euro area)") +
scale_colour_manual(values=c("Data"="grey","12-MA"="red"),
breaks=c("Data","12-MA"))
elecequip %>% decompose(type="multiplicative") %>%
autoplot() + xlab("Year") +
ggtitle("Classical multiplicative decomposition
of electrical equipment index")
library(seasona
library(seasonal)
library(seasonal)
elecequip %>% seas(x11="") -> fit
fit
autoplot(fit) +
ggtitle("X11 decomposition of electrical equipment index")
trendcycle(fit)
autoplot(elecequip, series="Data") +
autolayer(trendcycle(fit), series="Trend") +
autolayer(seasadj(fit), series="Seasonally Adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Electrical equipment manufacturing (Euro area)") +
scale_colour_manual(values=c("gray","blue","red"),
breaks=c("Data","Seasonally Adjusted","Trend"))
fit %>% seasonal() %>% ggsubseriesplot() + ylab("Seasonal")
library(forecast)
library(fpp2)
library(GGally)
library(ggplot2)
library(seasonal)
elecequip  %>% seas(x11="") -> fit
help("elecequip")
autoplot(fit) +
ggtitle("X11 decomposition of electrical equipement index")
autoplot(elecequip, series = "Data") +
autolayer(trendcycle(fit), series = "Trend" ) +
autolayer(seasadj(fit), series = "Seasonally adjusted") +
xlab("Year") + ylab("New orders index") +
ggtitle("Electrical equipment manufacturing (Euro area)") +
scale_color_manual(values=c("gray", "blue", "red"),
breaks=c("Data", "Seasonally adjusted", "Trend"))
fit %>% seasonal() %>% ggsubseriesplot() + ylab("Seasonal")
elecequip %>% seas() %>%
autoplot() +
ggtitle("SEATS decompition of electrical equipement index")
elecequip %>%
stl(t.window=13, s.window="periodic", robust=TRUE) %>%
autoplot()
fit <- stl(elecequip, t.window = 13, s.window = "periodic", robust = TRUE)
fit %>% seasadj() %>% naive() %>%
autoplot()  + ylab("New orders of index") +
ggtitle("Naive forecasts of seasonally adjusted data")
fit %>% forecast(method="naive") %>%
autoplot() + ylab("New orders index")
fcast <- stlf(elecequip, method='naive')
ICOS
getwd()
setwd("C:\\Users\\wabng\\Documents\\")
getwd()
valor1 <- sqrt((7 + 8) ^ 3 )
valor1
manzanas <- 8
naranjas <- 3
frutas <- manzanas + naranjas
frutas
promedio<-mean(c(manzanas, naranjas))  # Convierte a vector y luego toma
promedio
class(manzanas)
class(FALSE)
manzanas > naranjas
manzanas < naranjas
var1 <- c(1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5)
var1
var1 + var1
1:12
1:10 + 1:5 # Entender c'omo recicla vectores
matrix()
matrix(data = 1:9, nrow = 3, ncol = 3, byrow = TRUE)
matrix(data = 1:9, nrow = 3, ncol = 3, byrow = F)
data()
data("Orange")
View(Orange)
df<-data.frame(var1,word=7:15,anio=rep(1,9))
View(df)
str(df)  # nos da la estructura del df
list_a<-list(vector=var1, data=df, vector2=1:7)
list_a
list_a$data$word  # acceder al df  y luego a una columna
str(list_a)
install.packages("tidyr")
?lm
args(lm)
TRUE == FALSE
-6*14 != 17-101
"Abril" > "Mayo"
rm(list = ls())
setwd("C:/Users/wabng/Documents/Data science/Curso LAPSO/Week 5")
setwd("~/Data science/Curso LAPSO/Week 5")
library(Hmisc)
library(dplyr)
library(foreign)
library(haven)
library(stringr)
df.albercas <- read.csv("albercas_publicas_US.csv", stringsAsFactors = TRUE)
head(df.albercas)
df.albercas$numero <- str_extract(df.albercas$Address, "\\d+")
head(df.albercas)
df.albercas$condado <- str_extract(df.albercas$Address, "\\b[^,]+$")
head(df.albercas)
rm(list=ls())
lorem = "Lorem Ipsum"
(nchar(lorem)
nchar(lorem
nchar(lorem)
seq_len(nchar(lorem))
str_sub(lorem, seq_len(nchar(lorem)))
some_quote = c(
"I may not have gone",
"where I intended to go,",
"but I think I have ended up",
"where I needed to be")
some_quote
some_quote = paste(some_quote, collapse = " ")
some_quote
rm(list=ls())
df <- read.csv("Registro-asistencia.csv", stringsAsFactors = FALSE)
head(df)
m = [A-z]
[A-z]
df$curp
df$indic <- str_detect(df$curp, "[A-z]{4}[0-9]{6}[HhMm][A-z]{5}[0-9]{2}")
head(df)
df <- filter(df, indic==TRUE) # ahora solo seleccionamos los casos correctos
head(df)
df$anio <- str_extract(df$curp, "[0-9]{6}")
head(df)
str_sub(df$nac, 3,4)
str_sub(df$nac, 6,7)
df$anio2 <- paste(str_sub(df$nac, 3,4), str_sub(df$nac, 6,7), str_sub(df$nac, 9,10),
sep="")
head(df)
df$indic <- df$anio == df$anio2
head(df)
df <- arrange(df, indic)
head(df)
title <- c('Effective Java','Orientalism','False Impressions','How To Program Java','Making Software')
height <- c('123','197','177','238','245')
year <- c('2011','2011','3015','1999','1997')
books <-  data.frame(title,  height, year)
orderedBooks <- arrange(books, title)
orderedBooks
head(df)
rm(list=ls())
